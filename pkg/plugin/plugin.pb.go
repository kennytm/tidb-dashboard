// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: plugin.proto

package plugin

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TLSInfo struct {
	Ca   string `protobuf:"bytes,1,opt,name=ca,proto3" json:"ca,omitempty"`
	Cert string `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Key  string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *TLSInfo) Reset()         { *m = TLSInfo{} }
func (m *TLSInfo) String() string { return proto.CompactTextString(m) }
func (*TLSInfo) ProtoMessage()    {}
func (*TLSInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{0}
}
func (m *TLSInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSInfo.Merge(m, src)
}
func (m *TLSInfo) XXX_Size() int {
	return m.Size()
}
func (m *TLSInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TLSInfo proto.InternalMessageInfo

func (m *TLSInfo) GetCa() string {
	if m != nil {
		return m.Ca
	}
	return ""
}

func (m *TLSInfo) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

func (m *TLSInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type InstallRequest struct {
	PdEndpoint         string   `protobuf:"bytes,1,opt,name=pd_endpoint,json=pdEndpoint,proto3" json:"pd_endpoint,omitempty"`
	ClusterTls         *TLSInfo `protobuf:"bytes,2,opt,name=cluster_tls,json=clusterTls,proto3" json:"cluster_tls,omitempty"`
	TidbTls            *TLSInfo `protobuf:"bytes,3,opt,name=tidb_tls,json=tidbTls,proto3" json:"tidb_tls,omitempty"`
	EnableTelemetry    bool     `protobuf:"varint,4,opt,name=enable_telemetry,json=enableTelemetry,proto3" json:"enable_telemetry,omitempty"`
	EnableExperimental bool     `protobuf:"varint,5,opt,name=enable_experimental,json=enableExperimental,proto3" json:"enable_experimental,omitempty"`
}

func (m *InstallRequest) Reset()         { *m = InstallRequest{} }
func (m *InstallRequest) String() string { return proto.CompactTextString(m) }
func (*InstallRequest) ProtoMessage()    {}
func (*InstallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{1}
}
func (m *InstallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallRequest.Merge(m, src)
}
func (m *InstallRequest) XXX_Size() int {
	return m.Size()
}
func (m *InstallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstallRequest proto.InternalMessageInfo

func (m *InstallRequest) GetPdEndpoint() string {
	if m != nil {
		return m.PdEndpoint
	}
	return ""
}

func (m *InstallRequest) GetClusterTls() *TLSInfo {
	if m != nil {
		return m.ClusterTls
	}
	return nil
}

func (m *InstallRequest) GetTidbTls() *TLSInfo {
	if m != nil {
		return m.TidbTls
	}
	return nil
}

func (m *InstallRequest) GetEnableTelemetry() bool {
	if m != nil {
		return m.EnableTelemetry
	}
	return false
}

func (m *InstallRequest) GetEnableExperimental() bool {
	if m != nil {
		return m.EnableExperimental
	}
	return false
}

type InstallResponse struct {
	HttpHost string `protobuf:"bytes,1,opt,name=http_host,json=httpHost,proto3" json:"http_host,omitempty"`
}

func (m *InstallResponse) Reset()         { *m = InstallResponse{} }
func (m *InstallResponse) String() string { return proto.CompactTextString(m) }
func (*InstallResponse) ProtoMessage()    {}
func (*InstallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{2}
}
func (m *InstallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallResponse.Merge(m, src)
}
func (m *InstallResponse) XXX_Size() int {
	return m.Size()
}
func (m *InstallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InstallResponse proto.InternalMessageInfo

func (m *InstallResponse) GetHttpHost() string {
	if m != nil {
		return m.HttpHost
	}
	return ""
}

func init() {
	proto.RegisterType((*TLSInfo)(nil), "plugin.TLSInfo")
	proto.RegisterType((*InstallRequest)(nil), "plugin.InstallRequest")
	proto.RegisterType((*InstallResponse)(nil), "plugin.InstallResponse")
}

func init() { proto.RegisterFile("plugin.proto", fileDescriptor_22a625af4bc1cc87) }

var fileDescriptor_22a625af4bc1cc87 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0x87, 0x9b, 0xb6, 0xb7, 0x7f, 0x4e, 0x2f, 0x4d, 0x99, 0x0b, 0xf7, 0x86, 0x7b, 0x21, 0xb7,
	0x74, 0x55, 0x5d, 0x54, 0xa9, 0x0f, 0x20, 0x08, 0x05, 0x03, 0x2e, 0x24, 0xad, 0xe0, 0x2e, 0xa4,
	0xc9, 0xd1, 0x0e, 0x4e, 0x27, 0x63, 0xe6, 0x54, 0xac, 0x4f, 0xe1, 0x63, 0xb9, 0xec, 0xd2, 0xa5,
	0xb4, 0x4b, 0x5f, 0x42, 0x32, 0x49, 0x44, 0xd1, 0xdd, 0x99, 0xef, 0x7c, 0xcc, 0x39, 0xbf, 0x19,
	0xf8, 0xa9, 0xc4, 0xea, 0x9a, 0xcb, 0x91, 0x4a, 0x13, 0x4a, 0x58, 0x23, 0x3f, 0x0d, 0x8e, 0xa1,
	0x39, 0x3b, 0x9b, 0x7a, 0xf2, 0x2a, 0x61, 0x5d, 0xa8, 0x46, 0xa1, 0x63, 0xf5, 0xad, 0x61, 0xdb,
	0xaf, 0x46, 0x21, 0x63, 0x50, 0x8f, 0x30, 0x25, 0xa7, 0x6a, 0x88, 0xa9, 0x59, 0x0f, 0x6a, 0x37,
	0xb8, 0x76, 0x6a, 0x06, 0x65, 0xe5, 0xe0, 0xd5, 0x82, 0xae, 0x27, 0x35, 0x85, 0x42, 0xf8, 0x78,
	0xbb, 0x42, 0x4d, 0xec, 0x3f, 0x74, 0x54, 0x1c, 0xa0, 0x8c, 0x55, 0xc2, 0x25, 0x15, 0x37, 0x82,
	0x8a, 0x27, 0x05, 0x61, 0x87, 0xd0, 0x89, 0xc4, 0x4a, 0x13, 0xa6, 0x01, 0x09, 0x6d, 0x06, 0x74,
	0xc6, 0xf6, 0xa8, 0x58, 0xb0, 0xd8, 0xc7, 0x87, 0xc2, 0x99, 0x09, 0xcd, 0xf6, 0xa1, 0x45, 0x3c,
	0x9e, 0x1b, 0xbd, 0xf6, 0xbd, 0xde, 0xcc, 0x84, 0xcc, 0xdd, 0x83, 0x1e, 0xca, 0x70, 0x2e, 0x30,
	0x20, 0x14, 0xb8, 0x44, 0x4a, 0xd7, 0x4e, 0xbd, 0x6f, 0x0d, 0x5b, 0xbe, 0x9d, 0xf3, 0x59, 0x89,
	0xd9, 0x01, 0xfc, 0x2a, 0x54, 0xbc, 0x57, 0x98, 0xf2, 0x25, 0x4a, 0x0a, 0x85, 0xf3, 0xc3, 0xd8,
	0x2c, 0x6f, 0x4d, 0x3e, 0x74, 0x06, 0x23, 0xb0, 0xdf, 0xc3, 0x6a, 0x95, 0x48, 0x8d, 0xec, 0x1f,
	0xb4, 0x17, 0x44, 0x2a, 0x58, 0x24, 0xba, 0xcc, 0xda, 0xca, 0xc0, 0x69, 0xa2, 0x69, 0x7c, 0x09,
	0xf6, 0x85, 0x77, 0x6e, 0x16, 0x9d, 0x62, 0x7a, 0xc7, 0x23, 0x64, 0x13, 0x60, 0x9e, 0xe4, 0xc4,
	0x43, 0xc1, 0x1f, 0xb0, 0x6c, 0xb2, 0xdf, 0x65, 0x9c, 0xcf, 0x6f, 0xf9, 0xf7, 0xcf, 0x17, 0x9e,
	0x8f, 0x3d, 0x71, 0x9e, 0xb6, 0xae, 0xb5, 0xd9, 0xba, 0xd6, 0xcb, 0xd6, 0xb5, 0x1e, 0x77, 0x6e,
	0x65, 0xb3, 0x73, 0x2b, 0xcf, 0x3b, 0xb7, 0x32, 0x6f, 0x98, 0x1f, 0x3e, 0x7a, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0x0c, 0x2b, 0x64, 0x93, 0xf1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UIPluginServiceClient is the client API for UIPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UIPluginServiceClient interface {
	InitializeUIPlugin(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error)
}

type uIPluginServiceClient struct {
	cc *grpc.ClientConn
}

func NewUIPluginServiceClient(cc *grpc.ClientConn) UIPluginServiceClient {
	return &uIPluginServiceClient{cc}
}

func (c *uIPluginServiceClient) InitializeUIPlugin(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error) {
	out := new(InstallResponse)
	err := c.cc.Invoke(ctx, "/plugin.UIPluginService/InitializeUIPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UIPluginServiceServer is the server API for UIPluginService service.
type UIPluginServiceServer interface {
	InitializeUIPlugin(context.Context, *InstallRequest) (*InstallResponse, error)
}

// UnimplementedUIPluginServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUIPluginServiceServer struct {
}

func (*UnimplementedUIPluginServiceServer) InitializeUIPlugin(ctx context.Context, req *InstallRequest) (*InstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeUIPlugin not implemented")
}

func RegisterUIPluginServiceServer(s *grpc.Server, srv UIPluginServiceServer) {
	s.RegisterService(&_UIPluginService_serviceDesc, srv)
}

func _UIPluginService_InitializeUIPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIPluginServiceServer).InitializeUIPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.UIPluginService/InitializeUIPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIPluginServiceServer).InitializeUIPlugin(ctx, req.(*InstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UIPluginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.UIPluginService",
	HandlerType: (*UIPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitializeUIPlugin",
			Handler:    _UIPluginService_InitializeUIPlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}

func (m *TLSInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ca) > 0 {
		i -= len(m.Ca)
		copy(dAtA[i:], m.Ca)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Ca)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableExperimental {
		i--
		if m.EnableExperimental {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.EnableTelemetry {
		i--
		if m.EnableTelemetry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.TidbTls != nil {
		{
			size, err := m.TidbTls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlugin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ClusterTls != nil {
		{
			size, err := m.ClusterTls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlugin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PdEndpoint) > 0 {
		i -= len(m.PdEndpoint)
		copy(dAtA[i:], m.PdEndpoint)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.PdEndpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HttpHost) > 0 {
		i -= len(m.HttpHost)
		copy(dAtA[i:], m.HttpHost)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.HttpHost)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlugin(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlugin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TLSInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ca)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func (m *InstallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PdEndpoint)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.ClusterTls != nil {
		l = m.ClusterTls.Size()
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.TidbTls != nil {
		l = m.TidbTls.Size()
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.EnableTelemetry {
		n += 2
	}
	if m.EnableExperimental {
		n += 2
	}
	return n
}

func (m *InstallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HttpHost)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func sovPlugin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlugin(x uint64) (n int) {
	return sovPlugin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TLSInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ca", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ca = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PdEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterTls == nil {
				m.ClusterTls = &TLSInfo{}
			}
			if err := m.ClusterTls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TidbTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TidbTls == nil {
				m.TidbTls = &TLSInfo{}
			}
			if err := m.TidbTls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTelemetry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTelemetry = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableExperimental", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableExperimental = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlugin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlugin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlugin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlugin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlugin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlugin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlugin = fmt.Errorf("proto: unexpected end of group")
)
